// <auto-generated />
using System;
using FocusTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FocusTracker.Data.Migrations
{
    [DbContext(typeof(FocusTrackerDbContext))]
    partial class FocusTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("AppUsageStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("ActiveTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppUsageStats");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.ExperienceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecordedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XpEarned")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("ExperienceHistories");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.HourlyAppUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("ActiveTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Hour")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HourlyAppUsageLogs");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Restrictions");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.RestrictionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestrictionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("RestrictionRules");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.RestrictionToProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestrictionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("RestrictionToProgram");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Xp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.SkillCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SkillCategories");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.TaskProgram", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "ProgramId");

                    b.HasIndex("ProgramId");

                    b.ToTable("TaskPrograms");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.TaskProgramUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountedActiveSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InitialActiveSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RecordedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskProgramUsages");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.TrackedProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("IconBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTracked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("TotalUsageTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TrackedPrograms");
                });

            modelBuilder.Entity("TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EarnedXp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstimatedMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.ExperienceHistory", b =>
                {
                    b.HasOne("TaskItem", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.RestrictionRule", b =>
                {
                    b.HasOne("FocusTracker.Domain.Models.Restriction", "Restriction")
                        .WithMany("Rules")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.RestrictionToProgram", b =>
                {
                    b.HasOne("FocusTracker.Domain.Models.TrackedProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FocusTracker.Domain.Models.Restriction", "Restriction")
                        .WithMany("Targets")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.Skill", b =>
                {
                    b.HasOne("FocusTracker.Domain.Models.SkillCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.TaskProgram", b =>
                {
                    b.HasOne("FocusTracker.Domain.Models.TrackedProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskItem", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.TaskProgramUsage", b =>
                {
                    b.HasOne("FocusTracker.Domain.Models.TrackedProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskItem", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.TrackedProgram", b =>
                {
                    b.HasOne("TaskItem", null)
                        .WithMany("Programs")
                        .HasForeignKey("TaskItemId");
                });

            modelBuilder.Entity("TaskItem", b =>
                {
                    b.HasOne("FocusTracker.Domain.Models.Skill", "Skill")
                        .WithMany("Tasks")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.Restriction", b =>
                {
                    b.Navigation("Rules");

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("FocusTracker.Domain.Models.Skill", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskItem", b =>
                {
                    b.Navigation("Programs");
                });
#pragma warning restore 612, 618
        }
    }
}
